// Copyright 2025 The Multigres Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v4.25.1
// source: adminservice.proto

package adminservice

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// StartEventType enumerates the types of events during cluster startup
type StartEventType int32

const (
	StartEventType_START_EVENT_TYPE_UNSPECIFIED         StartEventType = 0
	StartEventType_START_EVENT_TYPE_STARTING            StartEventType = 1
	StartEventType_START_EVENT_TYPE_SERVICE_PROVISIONED StartEventType = 2
	StartEventType_START_EVENT_TYPE_COMPLETED           StartEventType = 3
	StartEventType_START_EVENT_TYPE_ERROR               StartEventType = 4
)

// Enum value maps for StartEventType.
var (
	StartEventType_name = map[int32]string{
		0: "START_EVENT_TYPE_UNSPECIFIED",
		1: "START_EVENT_TYPE_STARTING",
		2: "START_EVENT_TYPE_SERVICE_PROVISIONED",
		3: "START_EVENT_TYPE_COMPLETED",
		4: "START_EVENT_TYPE_ERROR",
	}
	StartEventType_value = map[string]int32{
		"START_EVENT_TYPE_UNSPECIFIED":         0,
		"START_EVENT_TYPE_STARTING":            1,
		"START_EVENT_TYPE_SERVICE_PROVISIONED": 2,
		"START_EVENT_TYPE_COMPLETED":           3,
		"START_EVENT_TYPE_ERROR":               4,
	}
)

func (x StartEventType) Enum() *StartEventType {
	p := new(StartEventType)
	*p = x
	return p
}

func (x StartEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_adminservice_proto_enumTypes[0].Descriptor()
}

func (StartEventType) Type() protoreflect.EnumType {
	return &file_adminservice_proto_enumTypes[0]
}

func (x StartEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartEventType.Descriptor instead.
func (StartEventType) EnumDescriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{0}
}

// ClusterStatus enumerates possible cluster states
type ClusterStatus int32

const (
	ClusterStatus_CLUSTER_STATUS_UNSPECIFIED ClusterStatus = 0
	ClusterStatus_CLUSTER_STATUS_STOPPED     ClusterStatus = 1
	ClusterStatus_CLUSTER_STATUS_STARTING    ClusterStatus = 2
	ClusterStatus_CLUSTER_STATUS_RUNNING     ClusterStatus = 3
	ClusterStatus_CLUSTER_STATUS_STOPPING    ClusterStatus = 4
	ClusterStatus_CLUSTER_STATUS_ERROR       ClusterStatus = 5
)

// Enum value maps for ClusterStatus.
var (
	ClusterStatus_name = map[int32]string{
		0: "CLUSTER_STATUS_UNSPECIFIED",
		1: "CLUSTER_STATUS_STOPPED",
		2: "CLUSTER_STATUS_STARTING",
		3: "CLUSTER_STATUS_RUNNING",
		4: "CLUSTER_STATUS_STOPPING",
		5: "CLUSTER_STATUS_ERROR",
	}
	ClusterStatus_value = map[string]int32{
		"CLUSTER_STATUS_UNSPECIFIED": 0,
		"CLUSTER_STATUS_STOPPED":     1,
		"CLUSTER_STATUS_STARTING":    2,
		"CLUSTER_STATUS_RUNNING":     3,
		"CLUSTER_STATUS_STOPPING":    4,
		"CLUSTER_STATUS_ERROR":       5,
	}
)

func (x ClusterStatus) Enum() *ClusterStatus {
	p := new(ClusterStatus)
	*p = x
	return p
}

func (x ClusterStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_adminservice_proto_enumTypes[1].Descriptor()
}

func (ClusterStatus) Type() protoreflect.EnumType {
	return &file_adminservice_proto_enumTypes[1]
}

func (x ClusterStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterStatus.Descriptor instead.
func (ClusterStatus) EnumDescriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{1}
}

// ServiceState enumerates possible service states
type ServiceState int32

const (
	ServiceState_SERVICE_STATE_UNSPECIFIED ServiceState = 0
	ServiceState_SERVICE_STATE_STOPPED     ServiceState = 1
	ServiceState_SERVICE_STATE_STARTING    ServiceState = 2
	ServiceState_SERVICE_STATE_RUNNING     ServiceState = 3
	ServiceState_SERVICE_STATE_STOPPING    ServiceState = 4
	ServiceState_SERVICE_STATE_ERROR       ServiceState = 5
)

// Enum value maps for ServiceState.
var (
	ServiceState_name = map[int32]string{
		0: "SERVICE_STATE_UNSPECIFIED",
		1: "SERVICE_STATE_STOPPED",
		2: "SERVICE_STATE_STARTING",
		3: "SERVICE_STATE_RUNNING",
		4: "SERVICE_STATE_STOPPING",
		5: "SERVICE_STATE_ERROR",
	}
	ServiceState_value = map[string]int32{
		"SERVICE_STATE_UNSPECIFIED": 0,
		"SERVICE_STATE_STOPPED":     1,
		"SERVICE_STATE_STARTING":    2,
		"SERVICE_STATE_RUNNING":     3,
		"SERVICE_STATE_STOPPING":    4,
		"SERVICE_STATE_ERROR":       5,
	}
)

func (x ServiceState) Enum() *ServiceState {
	p := new(ServiceState)
	*p = x
	return p
}

func (x ServiceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceState) Descriptor() protoreflect.EnumDescriptor {
	return file_adminservice_proto_enumTypes[2].Descriptor()
}

func (ServiceState) Type() protoreflect.EnumType {
	return &file_adminservice_proto_enumTypes[2]
}

func (x ServiceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceState.Descriptor instead.
func (ServiceState) EnumDescriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{2}
}

// HealthStatus enumerates possible health states
type HealthStatus int32

const (
	HealthStatus_HEALTH_STATUS_UNSPECIFIED HealthStatus = 0
	HealthStatus_HEALTH_STATUS_HEALTHY     HealthStatus = 1
	HealthStatus_HEALTH_STATUS_UNHEALTHY   HealthStatus = 2
	HealthStatus_HEALTH_STATUS_UNKNOWN     HealthStatus = 3
)

// Enum value maps for HealthStatus.
var (
	HealthStatus_name = map[int32]string{
		0: "HEALTH_STATUS_UNSPECIFIED",
		1: "HEALTH_STATUS_HEALTHY",
		2: "HEALTH_STATUS_UNHEALTHY",
		3: "HEALTH_STATUS_UNKNOWN",
	}
	HealthStatus_value = map[string]int32{
		"HEALTH_STATUS_UNSPECIFIED": 0,
		"HEALTH_STATUS_HEALTHY":     1,
		"HEALTH_STATUS_UNHEALTHY":   2,
		"HEALTH_STATUS_UNKNOWN":     3,
	}
)

func (x HealthStatus) Enum() *HealthStatus {
	p := new(HealthStatus)
	*p = x
	return p
}

func (x HealthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_adminservice_proto_enumTypes[3].Descriptor()
}

func (HealthStatus) Type() protoreflect.EnumType {
	return &file_adminservice_proto_enumTypes[3]
}

func (x HealthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthStatus.Descriptor instead.
func (HealthStatus) EnumDescriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{3}
}

// InitClusterRequest contains parameters for initializing a cluster
type InitClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// config_paths specifies directories to search for/create config files
	ConfigPaths []string `protobuf:"bytes,1,rep,name=config_paths,json=configPaths,proto3" json:"config_paths,omitempty"`
	// provisioner specifies which provisioner to use (e.g., "local")
	Provisioner string `protobuf:"bytes,2,opt,name=provisioner,proto3" json:"provisioner,omitempty"`
	// provisioner_config contains provisioner-specific configuration
	ProvisionerConfig map[string]string `protobuf:"bytes,3,rep,name=provisioner_config,json=provisionerConfig,proto3" json:"provisioner_config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *InitClusterRequest) Reset() {
	*x = InitClusterRequest{}
	mi := &file_adminservice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitClusterRequest) ProtoMessage() {}

func (x *InitClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adminservice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitClusterRequest.ProtoReflect.Descriptor instead.
func (*InitClusterRequest) Descriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{0}
}

func (x *InitClusterRequest) GetConfigPaths() []string {
	if x != nil {
		return x.ConfigPaths
	}
	return nil
}

func (x *InitClusterRequest) GetProvisioner() string {
	if x != nil {
		return x.Provisioner
	}
	return ""
}

func (x *InitClusterRequest) GetProvisionerConfig() map[string]string {
	if x != nil {
		return x.ProvisionerConfig
	}
	return nil
}

// InitClusterResponse contains the result of cluster initialization
type InitClusterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// config_file_path is the path to the created configuration file
	ConfigFilePath string `protobuf:"bytes,1,opt,name=config_file_path,json=configFilePath,proto3" json:"config_file_path,omitempty"`
	// cluster_id is the unique identifier for the cluster
	ClusterId     string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitClusterResponse) Reset() {
	*x = InitClusterResponse{}
	mi := &file_adminservice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitClusterResponse) ProtoMessage() {}

func (x *InitClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adminservice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitClusterResponse.ProtoReflect.Descriptor instead.
func (*InitClusterResponse) Descriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{1}
}

func (x *InitClusterResponse) GetConfigFilePath() string {
	if x != nil {
		return x.ConfigFilePath
	}
	return ""
}

func (x *InitClusterResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// StartClusterRequest contains parameters for starting a cluster
type StartClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// config_paths specifies directories to search for config files
	ConfigPaths []string `protobuf:"bytes,1,rep,name=config_paths,json=configPaths,proto3" json:"config_paths,omitempty"`
	// cluster_id optionally specifies which cluster to start (if managing multiple)
	ClusterId     string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterRequest) Reset() {
	*x = StartClusterRequest{}
	mi := &file_adminservice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterRequest) ProtoMessage() {}

func (x *StartClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adminservice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterRequest.ProtoReflect.Descriptor instead.
func (*StartClusterRequest) Descriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{2}
}

func (x *StartClusterRequest) GetConfigPaths() []string {
	if x != nil {
		return x.ConfigPaths
	}
	return nil
}

func (x *StartClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// StartClusterResponse contains streaming updates during cluster startup
type StartClusterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// event_type indicates the type of startup event
	EventType StartEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=multigres.admin.v1.StartEventType" json:"event_type,omitempty"`
	// message contains human-readable status message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// service contains information about a provisioned service
	Service *ServiceInfo `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	// error contains error details if event_type is ERROR
	Error         string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterResponse) Reset() {
	*x = StartClusterResponse{}
	mi := &file_adminservice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterResponse) ProtoMessage() {}

func (x *StartClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adminservice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterResponse.ProtoReflect.Descriptor instead.
func (*StartClusterResponse) Descriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{3}
}

func (x *StartClusterResponse) GetEventType() StartEventType {
	if x != nil {
		return x.EventType
	}
	return StartEventType_START_EVENT_TYPE_UNSPECIFIED
}

func (x *StartClusterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StartClusterResponse) GetService() *ServiceInfo {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *StartClusterResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// StopClusterRequest contains parameters for stopping a cluster
type StopClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// config_paths specifies directories to search for config files
	ConfigPaths []string `protobuf:"bytes,1,rep,name=config_paths,json=configPaths,proto3" json:"config_paths,omitempty"`
	// cluster_id optionally specifies which cluster to stop
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// clean indicates whether to remove all cluster data
	Clean         bool `protobuf:"varint,3,opt,name=clean,proto3" json:"clean,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopClusterRequest) Reset() {
	*x = StopClusterRequest{}
	mi := &file_adminservice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterRequest) ProtoMessage() {}

func (x *StopClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adminservice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterRequest.ProtoReflect.Descriptor instead.
func (*StopClusterRequest) Descriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{4}
}

func (x *StopClusterRequest) GetConfigPaths() []string {
	if x != nil {
		return x.ConfigPaths
	}
	return nil
}

func (x *StopClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *StopClusterRequest) GetClean() bool {
	if x != nil {
		return x.Clean
	}
	return false
}

// StopClusterResponse contains the result of stopping a cluster
type StopClusterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// message contains human-readable status message
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// services_stopped lists the services that were stopped
	ServicesStopped []string `protobuf:"bytes,2,rep,name=services_stopped,json=servicesStopped,proto3" json:"services_stopped,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StopClusterResponse) Reset() {
	*x = StopClusterResponse{}
	mi := &file_adminservice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterResponse) ProtoMessage() {}

func (x *StopClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adminservice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterResponse.ProtoReflect.Descriptor instead.
func (*StopClusterResponse) Descriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{5}
}

func (x *StopClusterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StopClusterResponse) GetServicesStopped() []string {
	if x != nil {
		return x.ServicesStopped
	}
	return nil
}

// GetClusterStatusRequest contains parameters for getting cluster status
type GetClusterStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// config_paths specifies directories to search for config files
	ConfigPaths []string `protobuf:"bytes,1,rep,name=config_paths,json=configPaths,proto3" json:"config_paths,omitempty"`
	// cluster_id optionally specifies which cluster to check
	ClusterId     string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterStatusRequest) Reset() {
	*x = GetClusterStatusRequest{}
	mi := &file_adminservice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterStatusRequest) ProtoMessage() {}

func (x *GetClusterStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adminservice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterStatusRequest.ProtoReflect.Descriptor instead.
func (*GetClusterStatusRequest) Descriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{6}
}

func (x *GetClusterStatusRequest) GetConfigPaths() []string {
	if x != nil {
		return x.ConfigPaths
	}
	return nil
}

func (x *GetClusterStatusRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

// GetClusterStatusResponse contains the current cluster status
type GetClusterStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// cluster_id is the unique identifier for the cluster
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// status indicates the overall cluster status
	Status ClusterStatus `protobuf:"varint,2,opt,name=status,proto3,enum=multigres.admin.v1.ClusterStatus" json:"status,omitempty"`
	// services contains status information for each service
	Services []*ServiceStatus `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty"`
	// message contains additional status information
	Message       string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterStatusResponse) Reset() {
	*x = GetClusterStatusResponse{}
	mi := &file_adminservice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterStatusResponse) ProtoMessage() {}

func (x *GetClusterStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adminservice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterStatusResponse.ProtoReflect.Descriptor instead.
func (*GetClusterStatusResponse) Descriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{7}
}

func (x *GetClusterStatusResponse) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetClusterStatusResponse) GetStatus() ClusterStatus {
	if x != nil {
		return x.Status
	}
	return ClusterStatus_CLUSTER_STATUS_UNSPECIFIED
}

func (x *GetClusterStatusResponse) GetServices() []*ServiceStatus {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *GetClusterStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ListClustersRequest contains parameters for listing clusters
type ListClustersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// config_paths specifies directories to search for config files
	ConfigPaths   []string `protobuf:"bytes,1,rep,name=config_paths,json=configPaths,proto3" json:"config_paths,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	mi := &file_adminservice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adminservice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{8}
}

func (x *ListClustersRequest) GetConfigPaths() []string {
	if x != nil {
		return x.ConfigPaths
	}
	return nil
}

// ListClustersResponse contains information about all known clusters
type ListClustersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// clusters contains information about each cluster
	Clusters      []*ClusterInfo `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	mi := &file_adminservice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adminservice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{9}
}

func (x *ListClustersResponse) GetClusters() []*ClusterInfo {
	if x != nil {
		return x.Clusters
	}
	return nil
}

// ClusterInfo contains basic information about a cluster
type ClusterInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// cluster_id is the unique identifier for the cluster
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// name is the human-readable name of the cluster
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// provisioner indicates which provisioner manages this cluster
	Provisioner string `protobuf:"bytes,3,opt,name=provisioner,proto3" json:"provisioner,omitempty"`
	// status indicates the current cluster status
	Status ClusterStatus `protobuf:"varint,4,opt,name=status,proto3,enum=multigres.admin.v1.ClusterStatus" json:"status,omitempty"`
	// config_file_path is the path to the cluster's configuration file
	ConfigFilePath string `protobuf:"bytes,5,opt,name=config_file_path,json=configFilePath,proto3" json:"config_file_path,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ClusterInfo) Reset() {
	*x = ClusterInfo{}
	mi := &file_adminservice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfo) ProtoMessage() {}

func (x *ClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_adminservice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfo.ProtoReflect.Descriptor instead.
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{10}
}

func (x *ClusterInfo) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusterInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterInfo) GetProvisioner() string {
	if x != nil {
		return x.Provisioner
	}
	return ""
}

func (x *ClusterInfo) GetStatus() ClusterStatus {
	if x != nil {
		return x.Status
	}
	return ClusterStatus_CLUSTER_STATUS_UNSPECIFIED
}

func (x *ClusterInfo) GetConfigFilePath() string {
	if x != nil {
		return x.ConfigFilePath
	}
	return ""
}

// ServiceInfo contains information about a provisioned service
type ServiceInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name is the name of the service (e.g., "etcd", "multigateway")
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// service_id is the unique identifier for this service instance
	ServiceId string `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// fqdn is the fully qualified domain name where the service is accessible
	Fqdn string `protobuf:"bytes,3,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	// ports maps port names to their numbers (e.g., "grpc" -> 2379)
	Ports map[string]int32 `protobuf:"bytes,4,rep,name=ports,proto3" json:"ports,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// metadata contains additional service-specific information
	Metadata      map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceInfo) Reset() {
	*x = ServiceInfo{}
	mi := &file_adminservice_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInfo) ProtoMessage() {}

func (x *ServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_adminservice_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInfo.ProtoReflect.Descriptor instead.
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{11}
}

func (x *ServiceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceInfo) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ServiceInfo) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *ServiceInfo) GetPorts() map[string]int32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *ServiceInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ServiceStatus contains status information for a service
type ServiceStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// service_info contains basic service information
	ServiceInfo *ServiceInfo `protobuf:"bytes,1,opt,name=service_info,json=serviceInfo,proto3" json:"service_info,omitempty"`
	// status indicates whether the service is running
	Status ServiceState `protobuf:"varint,2,opt,name=status,proto3,enum=multigres.admin.v1.ServiceState" json:"status,omitempty"`
	// health indicates the health of the service
	Health HealthStatus `protobuf:"varint,3,opt,name=health,proto3,enum=multigres.admin.v1.HealthStatus" json:"health,omitempty"`
	// last_check_time is when the status was last updated (Unix timestamp)
	LastCheckTime int64 `protobuf:"varint,4,opt,name=last_check_time,json=lastCheckTime,proto3" json:"last_check_time,omitempty"`
	// error_message contains error details if status is ERROR
	ErrorMessage  string `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceStatus) Reset() {
	*x = ServiceStatus{}
	mi := &file_adminservice_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatus) ProtoMessage() {}

func (x *ServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_adminservice_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatus.ProtoReflect.Descriptor instead.
func (*ServiceStatus) Descriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{12}
}

func (x *ServiceStatus) GetServiceInfo() *ServiceInfo {
	if x != nil {
		return x.ServiceInfo
	}
	return nil
}

func (x *ServiceStatus) GetStatus() ServiceState {
	if x != nil {
		return x.Status
	}
	return ServiceState_SERVICE_STATE_UNSPECIFIED
}

func (x *ServiceStatus) GetHealth() HealthStatus {
	if x != nil {
		return x.Health
	}
	return HealthStatus_HEALTH_STATUS_UNSPECIFIED
}

func (x *ServiceStatus) GetLastCheckTime() int64 {
	if x != nil {
		return x.LastCheckTime
	}
	return 0
}

func (x *ServiceStatus) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// ShutdownRequest contains parameters for shutting down the admin server
type ShutdownRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// force indicates whether to force shutdown even if clusters are running
	Force         bool `protobuf:"varint,1,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShutdownRequest) Reset() {
	*x = ShutdownRequest{}
	mi := &file_adminservice_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownRequest) ProtoMessage() {}

func (x *ShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_adminservice_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownRequest.ProtoReflect.Descriptor instead.
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{13}
}

func (x *ShutdownRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

// ShutdownResponse contains the result of the shutdown request
type ShutdownResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// message contains a confirmation message
	Message       string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShutdownResponse) Reset() {
	*x = ShutdownResponse{}
	mi := &file_adminservice_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownResponse) ProtoMessage() {}

func (x *ShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_adminservice_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownResponse.ProtoReflect.Descriptor instead.
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return file_adminservice_proto_rawDescGZIP(), []int{14}
}

func (x *ShutdownResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_adminservice_proto protoreflect.FileDescriptor

const file_adminservice_proto_rawDesc = "" +
	"\n" +
	"\x12adminservice.proto\x12\x12multigres.admin.v1\"\x8d\x02\n" +
	"\x12InitClusterRequest\x12!\n" +
	"\fconfig_paths\x18\x01 \x03(\tR\vconfigPaths\x12 \n" +
	"\vprovisioner\x18\x02 \x01(\tR\vprovisioner\x12l\n" +
	"\x12provisioner_config\x18\x03 \x03(\v2=.multigres.admin.v1.InitClusterRequest.ProvisionerConfigEntryR\x11provisionerConfig\x1aD\n" +
	"\x16ProvisionerConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"^\n" +
	"\x13InitClusterResponse\x12(\n" +
	"\x10config_file_path\x18\x01 \x01(\tR\x0econfigFilePath\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x02 \x01(\tR\tclusterId\"W\n" +
	"\x13StartClusterRequest\x12!\n" +
	"\fconfig_paths\x18\x01 \x03(\tR\vconfigPaths\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x02 \x01(\tR\tclusterId\"\xc4\x01\n" +
	"\x14StartClusterResponse\x12A\n" +
	"\n" +
	"event_type\x18\x01 \x01(\x0e2\".multigres.admin.v1.StartEventTypeR\teventType\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x129\n" +
	"\aservice\x18\x03 \x01(\v2\x1f.multigres.admin.v1.ServiceInfoR\aservice\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\"l\n" +
	"\x12StopClusterRequest\x12!\n" +
	"\fconfig_paths\x18\x01 \x03(\tR\vconfigPaths\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x02 \x01(\tR\tclusterId\x12\x14\n" +
	"\x05clean\x18\x03 \x01(\bR\x05clean\"Z\n" +
	"\x13StopClusterResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12)\n" +
	"\x10services_stopped\x18\x02 \x03(\tR\x0fservicesStopped\"[\n" +
	"\x17GetClusterStatusRequest\x12!\n" +
	"\fconfig_paths\x18\x01 \x03(\tR\vconfigPaths\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x02 \x01(\tR\tclusterId\"\xcd\x01\n" +
	"\x18GetClusterStatusResponse\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x129\n" +
	"\x06status\x18\x02 \x01(\x0e2!.multigres.admin.v1.ClusterStatusR\x06status\x12=\n" +
	"\bservices\x18\x03 \x03(\v2!.multigres.admin.v1.ServiceStatusR\bservices\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\"8\n" +
	"\x13ListClustersRequest\x12!\n" +
	"\fconfig_paths\x18\x01 \x03(\tR\vconfigPaths\"S\n" +
	"\x14ListClustersResponse\x12;\n" +
	"\bclusters\x18\x01 \x03(\v2\x1f.multigres.admin.v1.ClusterInfoR\bclusters\"\xc7\x01\n" +
	"\vClusterInfo\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vprovisioner\x18\x03 \x01(\tR\vprovisioner\x129\n" +
	"\x06status\x18\x04 \x01(\x0e2!.multigres.admin.v1.ClusterStatusR\x06status\x12(\n" +
	"\x10config_file_path\x18\x05 \x01(\tR\x0econfigFilePath\"\xd8\x02\n" +
	"\vServiceInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"service_id\x18\x02 \x01(\tR\tserviceId\x12\x12\n" +
	"\x04fqdn\x18\x03 \x01(\tR\x04fqdn\x12@\n" +
	"\x05ports\x18\x04 \x03(\v2*.multigres.admin.v1.ServiceInfo.PortsEntryR\x05ports\x12I\n" +
	"\bmetadata\x18\x05 \x03(\v2-.multigres.admin.v1.ServiceInfo.MetadataEntryR\bmetadata\x1a8\n" +
	"\n" +
	"PortsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x94\x02\n" +
	"\rServiceStatus\x12B\n" +
	"\fservice_info\x18\x01 \x01(\v2\x1f.multigres.admin.v1.ServiceInfoR\vserviceInfo\x128\n" +
	"\x06status\x18\x02 \x01(\x0e2 .multigres.admin.v1.ServiceStateR\x06status\x128\n" +
	"\x06health\x18\x03 \x01(\x0e2 .multigres.admin.v1.HealthStatusR\x06health\x12&\n" +
	"\x0flast_check_time\x18\x04 \x01(\x03R\rlastCheckTime\x12#\n" +
	"\rerror_message\x18\x05 \x01(\tR\ferrorMessage\"'\n" +
	"\x0fShutdownRequest\x12\x14\n" +
	"\x05force\x18\x01 \x01(\bR\x05force\",\n" +
	"\x10ShutdownResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage*\xb7\x01\n" +
	"\x0eStartEventType\x12 \n" +
	"\x1cSTART_EVENT_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19START_EVENT_TYPE_STARTING\x10\x01\x12(\n" +
	"$START_EVENT_TYPE_SERVICE_PROVISIONED\x10\x02\x12\x1e\n" +
	"\x1aSTART_EVENT_TYPE_COMPLETED\x10\x03\x12\x1a\n" +
	"\x16START_EVENT_TYPE_ERROR\x10\x04*\xbb\x01\n" +
	"\rClusterStatus\x12\x1e\n" +
	"\x1aCLUSTER_STATUS_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16CLUSTER_STATUS_STOPPED\x10\x01\x12\x1b\n" +
	"\x17CLUSTER_STATUS_STARTING\x10\x02\x12\x1a\n" +
	"\x16CLUSTER_STATUS_RUNNING\x10\x03\x12\x1b\n" +
	"\x17CLUSTER_STATUS_STOPPING\x10\x04\x12\x18\n" +
	"\x14CLUSTER_STATUS_ERROR\x10\x05*\xb4\x01\n" +
	"\fServiceState\x12\x1d\n" +
	"\x19SERVICE_STATE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15SERVICE_STATE_STOPPED\x10\x01\x12\x1a\n" +
	"\x16SERVICE_STATE_STARTING\x10\x02\x12\x19\n" +
	"\x15SERVICE_STATE_RUNNING\x10\x03\x12\x1a\n" +
	"\x16SERVICE_STATE_STOPPING\x10\x04\x12\x17\n" +
	"\x13SERVICE_STATE_ERROR\x10\x05*\x80\x01\n" +
	"\fHealthStatus\x12\x1d\n" +
	"\x19HEALTH_STATUS_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15HEALTH_STATUS_HEALTHY\x10\x01\x12\x1b\n" +
	"\x17HEALTH_STATUS_UNHEALTHY\x10\x02\x12\x19\n" +
	"\x15HEALTH_STATUS_UNKNOWN\x10\x032\xdc\x04\n" +
	"\fAdminService\x12^\n" +
	"\vInitCluster\x12&.multigres.admin.v1.InitClusterRequest\x1a'.multigres.admin.v1.InitClusterResponse\x12c\n" +
	"\fStartCluster\x12'.multigres.admin.v1.StartClusterRequest\x1a(.multigres.admin.v1.StartClusterResponse0\x01\x12^\n" +
	"\vStopCluster\x12&.multigres.admin.v1.StopClusterRequest\x1a'.multigres.admin.v1.StopClusterResponse\x12m\n" +
	"\x10GetClusterStatus\x12+.multigres.admin.v1.GetClusterStatusRequest\x1a,.multigres.admin.v1.GetClusterStatusResponse\x12a\n" +
	"\fListClusters\x12'.multigres.admin.v1.ListClustersRequest\x1a(.multigres.admin.v1.ListClustersResponse\x12U\n" +
	"\bShutdown\x12#.multigres.admin.v1.ShutdownRequest\x1a$.multigres.admin.v1.ShutdownResponseB3Z1github.com/multigres/multigres/go/pb/adminserviceb\x06proto3"

var (
	file_adminservice_proto_rawDescOnce sync.Once
	file_adminservice_proto_rawDescData []byte
)

func file_adminservice_proto_rawDescGZIP() []byte {
	file_adminservice_proto_rawDescOnce.Do(func() {
		file_adminservice_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_adminservice_proto_rawDesc), len(file_adminservice_proto_rawDesc)))
	})
	return file_adminservice_proto_rawDescData
}

var file_adminservice_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_adminservice_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_adminservice_proto_goTypes = []any{
	(StartEventType)(0),              // 0: multigres.admin.v1.StartEventType
	(ClusterStatus)(0),               // 1: multigres.admin.v1.ClusterStatus
	(ServiceState)(0),                // 2: multigres.admin.v1.ServiceState
	(HealthStatus)(0),                // 3: multigres.admin.v1.HealthStatus
	(*InitClusterRequest)(nil),       // 4: multigres.admin.v1.InitClusterRequest
	(*InitClusterResponse)(nil),      // 5: multigres.admin.v1.InitClusterResponse
	(*StartClusterRequest)(nil),      // 6: multigres.admin.v1.StartClusterRequest
	(*StartClusterResponse)(nil),     // 7: multigres.admin.v1.StartClusterResponse
	(*StopClusterRequest)(nil),       // 8: multigres.admin.v1.StopClusterRequest
	(*StopClusterResponse)(nil),      // 9: multigres.admin.v1.StopClusterResponse
	(*GetClusterStatusRequest)(nil),  // 10: multigres.admin.v1.GetClusterStatusRequest
	(*GetClusterStatusResponse)(nil), // 11: multigres.admin.v1.GetClusterStatusResponse
	(*ListClustersRequest)(nil),      // 12: multigres.admin.v1.ListClustersRequest
	(*ListClustersResponse)(nil),     // 13: multigres.admin.v1.ListClustersResponse
	(*ClusterInfo)(nil),              // 14: multigres.admin.v1.ClusterInfo
	(*ServiceInfo)(nil),              // 15: multigres.admin.v1.ServiceInfo
	(*ServiceStatus)(nil),            // 16: multigres.admin.v1.ServiceStatus
	(*ShutdownRequest)(nil),          // 17: multigres.admin.v1.ShutdownRequest
	(*ShutdownResponse)(nil),         // 18: multigres.admin.v1.ShutdownResponse
	nil,                              // 19: multigres.admin.v1.InitClusterRequest.ProvisionerConfigEntry
	nil,                              // 20: multigres.admin.v1.ServiceInfo.PortsEntry
	nil,                              // 21: multigres.admin.v1.ServiceInfo.MetadataEntry
}
var file_adminservice_proto_depIdxs = []int32{
	19, // 0: multigres.admin.v1.InitClusterRequest.provisioner_config:type_name -> multigres.admin.v1.InitClusterRequest.ProvisionerConfigEntry
	0,  // 1: multigres.admin.v1.StartClusterResponse.event_type:type_name -> multigres.admin.v1.StartEventType
	15, // 2: multigres.admin.v1.StartClusterResponse.service:type_name -> multigres.admin.v1.ServiceInfo
	1,  // 3: multigres.admin.v1.GetClusterStatusResponse.status:type_name -> multigres.admin.v1.ClusterStatus
	16, // 4: multigres.admin.v1.GetClusterStatusResponse.services:type_name -> multigres.admin.v1.ServiceStatus
	14, // 5: multigres.admin.v1.ListClustersResponse.clusters:type_name -> multigres.admin.v1.ClusterInfo
	1,  // 6: multigres.admin.v1.ClusterInfo.status:type_name -> multigres.admin.v1.ClusterStatus
	20, // 7: multigres.admin.v1.ServiceInfo.ports:type_name -> multigres.admin.v1.ServiceInfo.PortsEntry
	21, // 8: multigres.admin.v1.ServiceInfo.metadata:type_name -> multigres.admin.v1.ServiceInfo.MetadataEntry
	15, // 9: multigres.admin.v1.ServiceStatus.service_info:type_name -> multigres.admin.v1.ServiceInfo
	2,  // 10: multigres.admin.v1.ServiceStatus.status:type_name -> multigres.admin.v1.ServiceState
	3,  // 11: multigres.admin.v1.ServiceStatus.health:type_name -> multigres.admin.v1.HealthStatus
	4,  // 12: multigres.admin.v1.AdminService.InitCluster:input_type -> multigres.admin.v1.InitClusterRequest
	6,  // 13: multigres.admin.v1.AdminService.StartCluster:input_type -> multigres.admin.v1.StartClusterRequest
	8,  // 14: multigres.admin.v1.AdminService.StopCluster:input_type -> multigres.admin.v1.StopClusterRequest
	10, // 15: multigres.admin.v1.AdminService.GetClusterStatus:input_type -> multigres.admin.v1.GetClusterStatusRequest
	12, // 16: multigres.admin.v1.AdminService.ListClusters:input_type -> multigres.admin.v1.ListClustersRequest
	17, // 17: multigres.admin.v1.AdminService.Shutdown:input_type -> multigres.admin.v1.ShutdownRequest
	5,  // 18: multigres.admin.v1.AdminService.InitCluster:output_type -> multigres.admin.v1.InitClusterResponse
	7,  // 19: multigres.admin.v1.AdminService.StartCluster:output_type -> multigres.admin.v1.StartClusterResponse
	9,  // 20: multigres.admin.v1.AdminService.StopCluster:output_type -> multigres.admin.v1.StopClusterResponse
	11, // 21: multigres.admin.v1.AdminService.GetClusterStatus:output_type -> multigres.admin.v1.GetClusterStatusResponse
	13, // 22: multigres.admin.v1.AdminService.ListClusters:output_type -> multigres.admin.v1.ListClustersResponse
	18, // 23: multigres.admin.v1.AdminService.Shutdown:output_type -> multigres.admin.v1.ShutdownResponse
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_adminservice_proto_init() }
func file_adminservice_proto_init() {
	if File_adminservice_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_adminservice_proto_rawDesc), len(file_adminservice_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_adminservice_proto_goTypes,
		DependencyIndexes: file_adminservice_proto_depIdxs,
		EnumInfos:         file_adminservice_proto_enumTypes,
		MessageInfos:      file_adminservice_proto_msgTypes,
	}.Build()
	File_adminservice_proto = out.File
	file_adminservice_proto_goTypes = nil
	file_adminservice_proto_depIdxs = nil
}
